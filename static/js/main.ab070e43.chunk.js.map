{"version":3,"sources":["assets/avatar.png","components/actions/reviews.js","components/ProfileTitle.js","components/ProfileServices.js","utils/varyDateView.js","components/ReviewSwitcher.js","components/ReviewAddNew.js","App.js","serviceWorker.js","components/store/initialState.js","components/reducers/index.js","components/reducers/reviews.js","components/store/index.js","index.js"],"names":["module","exports","__webpack_require__","p","REVIEWS_REQUEST","REVIEWS_REQUEST_SUCCESS","REVIEWS_REQUEST_FAIL","getReviews","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","comments","wrap","_context","prev","next","type","fetch","then","resp","json","data","sent","payload","t0","error","stop","_x","apply","this","arguments","ADD_REVIEWS_REQUEST","ADD_REVIEWS_REQUEST_SUCCESS","ADD_REVIEWS_REQUEST_FAIL","addReviewsRequestSuccess","status","addReview","_ref2","_callee2","_context2","method","body","JSON","stringify","headers","content-type","_x2","ProfileTitle","currentUserProfile","userAvatar","userName","userPosition","userSummary","src","alt","react_default","createElement","className","ProfileServices","servicesTitle","services","maxValue","forEach","element","count","totalCount","reduce","accumulator","elem","servicesList","map","currentWidth","key","title","style","width","concat","varyDateView","date","monthNames","Date","toLocaleDateString","split","el","ind","ReviewSwitcher","state","latestReviews","switchView","_this","setState","prevState","renderComment","msg","time","Math","random","name","text","renderCommentsList","reviews","props","slice","length","_this$props","likes","isFetching","onClick","disabled","Component","defaultProps","connect","ReviewAddNew","handleInput","e","ctrlKey","saveReview","safeValue","target","value","join","trim","getTime","prevProps","_this$props2","isFetchingComment","errorAddComment","onChange","rows","onKeyUp","console","log","mapDispatchToProps","objectSpread","actions","App","componentDidMount","_this$props$currentUs","currentProfile","ProfileTitle_ProfileTitle","ProfileServices_ProfileServices","components_ReviewSwitcher","components_ReviewAddNew","avatar","Boolean","window","location","hostname","match","initialState","combineReducers","undefined","types","newCommentsArray","toConsumableArray","push","middlewares","thunk","createStore","reducers","applyMiddleware","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab070e43.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.447ef0d9.png\";","export const REVIEWS_REQUEST = \"REVIEWS_REQUEST\";\r\nexport const REVIEWS_REQUEST_SUCCESS = \"REVIEWS_REQUEST_SUCCESS\";\r\nexport const REVIEWS_REQUEST_FAIL = \"REVIEWS_REQUEST_FAIL\";\r\n\r\nconst reviewsRequest = () => ({\r\n    type: REVIEWS_REQUEST\r\n});\r\n  \r\nconst reviewsRequestSuccess = payload => ({\r\n    type: REVIEWS_REQUEST_SUCCESS,\r\n    payload\r\n});\r\n  \r\nconst reviewsRequestFail = error => ({\r\n    type: REVIEWS_REQUEST_FAIL,\r\n    error\r\n});\r\n\r\nexport const getReviews = () => async dispatch => {\r\n    dispatch(reviewsRequest());\r\n    try {\r\n      const comments = await fetch(`http://localhost:3000/comments`)\r\n      .then(resp => resp.json())\r\n          .then(data => data); \r\n      dispatch(reviewsRequestSuccess(comments));\r\n    } catch (error) {\r\n      dispatch(reviewsRequestFail(error));\r\n    }\r\n};\r\n\r\nexport const ADD_REVIEWS_REQUEST = \"ADD_REVIEWS_REQUEST\";\r\nexport const ADD_REVIEWS_REQUEST_SUCCESS = \"ADD_REVIEWS_REQUEST_SUCCESS\";\r\nexport const ADD_REVIEWS_REQUEST_FAIL = \"ADD_REVIEWS_REQUEST_FAIL\";\r\n\r\nconst addReviewsRequest = () => ({\r\n    type: ADD_REVIEWS_REQUEST,\r\n    status: \"PENDING\",\r\n});\r\n  \r\nconst addReviewsRequestSuccess = payload => ({\r\n    type: ADD_REVIEWS_REQUEST_SUCCESS,\r\n    status: \"RESOLVED\",\r\n    payload\r\n});\r\n  \r\nconst addReviewsRequestFail = error => ({\r\n    type: ADD_REVIEWS_REQUEST_FAIL,\r\n    status: \"REJECTED\",\r\n    error\r\n});\r\n\r\nexport const addReview = (payload) => async dispatch => {\r\n    dispatch(addReviewsRequest());\r\n    try {\r\n        const comments = await fetch(`http://localhost:3000/comments`,{\r\n            method: \"POST\",\r\n            body: JSON.stringify(payload),\r\n            headers: {\r\n                \"content-type\": \"application/json\"\r\n            }\r\n        })\r\n        .then(resp => resp.json())\r\n            .then(data => data); \r\n      dispatch(addReviewsRequestSuccess(comments));\r\n    } catch (error) {\r\n      dispatch(addReviewsRequestFail(error));\r\n    } \r\n};","import React from \"react\";\r\n\r\nexport const ProfileTitle = ({currentUserProfile}) => {\r\n    const {userAvatar, userName, userPosition, userSummary} = currentUserProfile;\r\n    const {src, alt } = userAvatar;\r\n    return (\r\n        <div className=\"title\" >\r\n            <div className=\"title__img-box\" >\r\n                <img src={src} alt={alt} \r\n                    className=\"title__img\" />\r\n            </div>\r\n            <div className=\"title__description-box\" >\r\n                <h3 className=\"title__name\" >\r\n                    {userName}\r\n                </h3>\r\n                <p className=\"title__position\" >\r\n                    {userPosition}\r\n                </p>                    \r\n                <p className=\"title__summary\" >\r\n                    {userSummary}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport const ProfileServices = ({servicesTitle, services}) => {\r\n    let maxValue = 0;\r\n\r\n    services.forEach(element => {\r\n        maxValue = element.count > maxValue ? element.count : maxValue \r\n    });\r\n\r\n    let totalCount = services.reduce((accumulator, elem) => {\r\n        return accumulator + elem.count}, 0);\r\n\r\n    const servicesList = services.map(elem => {\r\n        let currentWidth = elem.count*100/totalCount\r\n        return (\r\n            <div className=\"services-list__item-box\" key={elem.title} >\r\n                <p className=\"services-list__item-title\" >\r\n                    {elem.title}\r\n                </p>\r\n                <div className={elem.count === maxValue ? \r\n                    \"services-list__count-view_max\" : \"services-list__count-view\"} \r\n                    style = {{width:`${currentWidth}%`}} />\r\n                <p className=\"services-list__item-count\" >\r\n                    {elem.count}\r\n                </p>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"services\" >\r\n            <p className=\"services__title\">\r\n                {servicesTitle}\r\n            </p>\r\n            <div className=\"services-list\">\r\n                {servicesList}\r\n            </div>                \r\n            <div className=\"services-list__item-box services-list__item-box_total\">\r\n                <p className=\"services-list__total-title\">\r\n                    Всего\r\n                </p>\r\n                <p className=\"services-list__total-count\">\r\n                    {totalCount}\r\n                </p>\r\n            </div>                \r\n        </div>\r\n    );\r\n}","export default date => {\r\n  var monthNames = [\r\n    \"январь\",\r\n    \"февраль\",\r\n    \"март\",\r\n    \"апрель\",\r\n    \"май\",\r\n    \"июнь\",\r\n    \"июль\",\r\n    \"август\",\r\n    \"сентябрь\",\r\n    \"октябрь\",\r\n    \"ноябрь\",\r\n    \"декабрь\"\r\n  ];\r\n  return new Date(date)\r\n    .toLocaleDateString()\r\n    .split(\".\")\r\n    .reduce((prev, el, ind) => {\r\n      ind === 0\r\n        ? (prev = \" \" + prev + el)\r\n        : ind === 1\r\n        ? (prev = prev + \" \" + monthNames[+el - 1])\r\n        : (prev = prev + \" \" + el);\r\n      return prev;\r\n    }, \"\");\r\n};\r\n","import React, {Component} from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport varyDateView from \"../utils/varyDateView\";\r\n\r\nclass ReviewSwitcher extends Component {\r\n    static defaultProps = {\r\n        reviews: [],\r\n        likes: 131,\r\n        isFetching: false\r\n    }\r\n\r\n    state = {\r\n        latestReviews: true\r\n    }\r\n\r\n    switchView = () => {\r\n        this.setState(prevState => ({latestReviews: !prevState.latestReviews}))\r\n    }\r\n\r\n    renderComment = (msg) => (<div className=\"reviews__item\" key={msg.time + Math.random()*10} >\r\n                                <p className=\"reviews__name\" >\r\n                                    {msg.name}\r\n                                    <span className=\"reviews__date\" >\r\n                                        {varyDateView(msg.time)}\r\n                                    </span> \r\n                                </p>\r\n                                <div className=\"reviews__text-box\">\r\n                                    <p className=\"reviews__text\" >\r\n                                        {msg.text}\r\n                                    </p>\r\n                                </div>\r\n                            </div>)\r\n    renderCommentsList = () => {\r\n        const {reviews} = this.props;\r\n        const {latestReviews} = this.state;\r\n        return (\r\n            latestReviews \r\n                ? reviews.slice(reviews.length - 3).map( msg => (this.renderComment(msg))) \r\n                : reviews.map( msg => (this.renderComment(msg)))\r\n        )\r\n    }\r\n\r\n    render () {\r\n        const {reviews, likes, isFetching} = this.props;\r\n        const {latestReviews} = this.state;\r\n       \r\n        return ( isFetching \r\n            ? \r\n            <p>Loading</p> \r\n            :\r\n            <div className=\"reviews\" >\r\n                <div className=\"reviews__total\" >\r\n                    <div className=\"reviews__toggle-view\" >\r\n                        <button onClick={this.switchView} \r\n                            disabled={latestReviews}\r\n                            className={latestReviews ? \"reviews__active\" : \"reviews__not-active\"} >\r\n                                Последние отзывы\r\n                        </button>\r\n                        <button onClick={this.switchView} \r\n                            disabled={!latestReviews}\r\n                            className={latestReviews ? \"reviews__not-active\" : \"reviews__active\"} >\r\n                                Все отзывы\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"reviews__indicators-view\" >\r\n                        {likes > 0 && \r\n                            <span className=\"reviews__indicators_likes\" >\r\n                                {likes}\r\n                            </span>}\r\n                        {reviews && \r\n                            <span className=\"reviews__indicators_comments\" >\r\n                                {reviews.length}\r\n                            </span>}\r\n                    </div>\r\n                </div>\r\n                <div className=\"reviews__list\">\r\n                    {reviews \r\n                        ? this.renderCommentsList()\r\n                        : \"Отзывов пока нет\"}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isFetching: state.reviews.isFetching,\r\n    reviews: state.reviews.comments\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(ReviewSwitcher);","import React, {Component} from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport * as actions from \"./actions/reviews\";\r\n\r\nclass ReviewAddNew extends Component {\r\n    static defaultProps = {\r\n        addReview: () => (console.log(\"addReview isn't set\")),\r\n        userName: \"Юзер Юзер\", // mock\r\n        isFetching: false,\r\n        isFetchingComment: false,\r\n        errorAddComment: false\r\n    }\r\n\r\n    state = {\r\n        text: \"\"\r\n    }\r\n\r\n    handleInput = (e) => {\r\n        if (e.ctrlKey && e.key === 'Enter' ){\r\n            this.saveReview()\r\n        } else {\r\n            let safeValue = e.target.value.split(\"<\").join(\"&lt\")\r\n            this.setState({text: safeValue})\r\n        }        \r\n    }\r\n\r\n    saveReview = () => {\r\n        const {addReview, userName} = this.props;\r\n        if(!this.state.text.trim()) return;\r\n        addReview({\r\n            name: userName,\r\n            time: new Date().getTime(),\r\n            text: this.state.text.trim()\r\n        })        \r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.status === 'PENDING' && this.props.status === 'RESOLVED' && this.state.text){\r\n            this.setState({text: ''})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {isFetching, isFetchingComment, errorAddComment} = this.props;        \r\n        return(\r\n            <div className=\"reviews__add\" >\r\n                {errorAddComment && \r\n                    <span className=\"reviews__error\"> \r\n                        Что-то пошло не так. Попробуйте еще раз\r\n                    </span> }\r\n                <textarea \r\n                    onChange={this.handleInput} \r\n                    className=\"reviews__input\" \r\n                    rows=\"4\" \r\n                    value = {this.state.text} \r\n                    onKeyUp={this.handleInput}\r\n                    />\r\n                <button onClick={this.saveReview} \r\n                    disabled={isFetchingComment || isFetching ? true : false} \r\n                    className=\"reviews__button\"  >\r\n                        Написать консультанту\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isFetchingComment: state.reviews.isFetchingComment,\r\n    isFetching: state.reviews.isFetching,\r\n    errorAddComment: state.reviews.errorAddComment,\r\n    status: state.reviews.status\r\n});\r\n\r\nconst mapDispatchToProps = {...actions};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReviewAddNew);","import React, {Component} from 'react';\nimport './App.css';\n\nimport avatar from \"./assets/avatar.png\"; // import because no requests for currentProfile\n\nimport { connect } from 'react-redux';\nimport * as actions from \"./components/actions/reviews\";\n\nimport {ProfileTitle} from \"./components/ProfileTitle\";\nimport {ProfileServices} from \"./components/ProfileServices\";\nimport ReviewSwitcher from \"./components/ReviewSwitcher\";\nimport ReviewAddNew from \"./components/ReviewAddNew\";\n\n\nclass App extends Component {\n  static defaultProps = {\n    getReviews: () => (console.log(\"getReviews isn't set\")),\n    currentUserProfile: {\n      currentProfile: {\n        userAvatar:{\n          src: avatar,\n          alt: \"Вероника Ростова\"\n        }, \n        userName: \"Вероника Ростова\", \n        userPosition: \"Менеджер по продажам\", \n        userSummary: \"Подберу для вас самые лучшие предложения. Мои услуги абсолютно бесплатны\"\n      },\n      services: {\n        servicesTitle: \"Услуг\",\n        servicesList: [\n          {\n            title: \"Ручное бронирование\",\n            count: 11,\n          },\n          {\n            title: \"Пакетные туры\",\n            count: 3,\n          },\n          {\n            title: \"Отели\",\n            count: 1,\n          }\n        ]\n      }\n    }\n  }\n\n  componentDidMount = () => {\n    this.props.getReviews()\n  }\n\n  render () {\n    const {currentProfile, servicesTitle, services} = this.props.currentUserProfile;\n    return (\n      <div className=\"reviews-box\">\n        <ProfileTitle currentUserProfile={currentProfile}  />\n        <ProfileServices servicesTitle={servicesTitle} \n          services={services.servicesList} />\n        <ReviewSwitcher />\n        <ReviewAddNew />\n      </div>\n    );\n  }  \n}\n\n// const mapStateToProps = state => ({\n//   currentUserProfile: state.currentUserProfile\n// });\n\nconst mapDispatchToProps = {...actions};\n\nexport default connect(null, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {  \r\n  reviews: {    \r\n    isFetching: false,\r\n    isFetchingComment: false,\r\n    comments: [\r\n      {\r\n        name: \"\",\r\n        time: 0,\r\n        text: \"\"\r\n      }\r\n    ],\r\n    error: false,\r\n    errorAddComment: false,\r\n    status: \"\"\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport reviews from \"./reviews\";\r\n\r\n\r\nexport default combineReducers({\r\n    reviews,  \r\n});\r\n","import initialState from \"../store/initialState\";\r\nimport * as types from \"../actions/reviews\";\r\n\r\nexport default (state = initialState.reviews, { type, payload, status }) => {\r\n  switch (type) {\r\n    case types.REVIEWS_REQUEST: {        \r\n        return { ...state, error: false, isFetching: true };\r\n    }\r\n    case types.REVIEWS_REQUEST_SUCCESS: {        \r\n        return { ...state, comments: payload, isFetching: false };\r\n    }\r\n    case types.REVIEWS_REQUEST_FAIL: {        \r\n        return { ...state, error: true, isFetching: false };\r\n    }\r\n\r\n    case types.ADD_REVIEWS_REQUEST: {        \r\n        return { ...state, errorAddComment: false, isFetchingComment: true, status };\r\n    }\r\n    case types.ADD_REVIEWS_REQUEST_SUCCESS: {\r\n        let newCommentsArray = [...state.comments] \r\n        newCommentsArray.push(payload)\r\n        return { ...state, comments: newCommentsArray, isFetchingComment: false, status };\r\n    }\r\n    case types.ADD_REVIEWS_REQUEST_FAIL: {        \r\n        return { ...state, errorAddComment: true, isFetchingComment: false, status };\r\n    }\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};","import { createStore, applyMiddleware } from \"redux\";\r\n\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport reducers from \"../reducers\";\r\nimport initialState from \"./initialState\";\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === `development`) {\r\n  const { logger } = require(`redux-logger`);\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport default createStore(\r\n  reducers,\r\n  initialState,\r\n  applyMiddleware(...middlewares)\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./components/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')    \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}